buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
        classpath("org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile project(":livingdoc-api")
    compile project(":livingdoc-converters")
    compile project(":livingdoc-repositories")

    compile("org.slf4j:slf4j-api:1.7.25")
    compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version")

    testCompile("ch.qos.logback:logback-classic:1.2.3")
    testCompile("org.assertj:assertj-core:3.6.2")
    testCompile('org.mockito:mockito-core:2.7.22')
    testCompile('com.nhaarman:mockito-kotlin:1.4.0') { transitive = false }

    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")

    testRuntime("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}")
}

compileTestJava {
    options.compilerArgs << "-parameters"
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives(javadocJar)
    archives(sourcesJar)
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
